{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { readFileSync } from \"fs\";\nconst initialState = {\n  projects: []\n};\nexport const useFetchProjects = () => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n  const [error, setError] = useState(false);\n\n  const fetchMovie = () => {\n    try {\n      setError(false);\n      console.log('here');\n      const c = readFileSync('../Assets/texts/project_dis.JSON');\n      console.log(JSON.parse(c)); // setState(project);\n    } catch (error) {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchMovie();\n  }, []);\n  return {\n    state,\n    error\n  };\n};\n\n_s(useFetchProjects, \"6toE5i7aduSgwonEmsbWR3fYskQ=\");","map":{"version":3,"sources":["/Users/ali_erfanian/Desktop/Portfolio/src/Hooks/useFetchProjects.js"],"names":["useEffect","useState","readFileSync","initialState","projects","useFetchProjects","state","setState","error","setError","fetchMovie","console","log","c","JSON","parse"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,YAAR,QAA2B,IAA3B;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;AAIA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAElC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACE,YAAD,CAAlC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMS,UAAU,GAAG,MAAM;AACrB,QAAI;AACAD,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,YAAMC,CAAC,GAAGX,YAAY,CAAC,kCAAD,CAAtB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAZ,EAJA,CAKD;AACF,KAND,CAME,OAAOL,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAVD;;AAYAT,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACJ,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAAP;AAEH,CAvBM;;GAAMH,gB","sourcesContent":["import {useEffect, useState} from \"react\";\nimport {readFileSync} from \"fs\";\n\n\nconst initialState = {\n    projects: [],\n}\n\nexport const useFetchProjects = () => {\n\n    const [state, setState] = useState(initialState);\n    const [error, setError] = useState(false)\n\n    const fetchMovie = () => {\n        try {\n            setError(false);\n            console.log('here');\n            const c = readFileSync('../Assets/texts/project_dis.JSON');\n            console.log(JSON.parse(c));\n           // setState(project);\n        } catch (error) {\n            setError(true);\n        }\n    };\n\n    useEffect(() => {\n        fetchMovie()\n    }, [])\n\n    return {state, error};\n\n}"]},"metadata":{},"sourceType":"module"}